"""
Django settings for travel_agency project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
GOOGLE_APPLICATION_CREDENTIALS = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
if GOOGLE_APPLICATION_CREDENTIALS:
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = str(BASE_DIR / GOOGLE_APPLICATION_CREDENTIALS)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/


# Load environment variables from .env file
load_dotenv(os.path.join(BASE_DIR, ".env"))


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main',
    'chatbot',
    'reservation',
    'signals.apps.SignalsConfig',
    'Chat',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist', 
    'drf_spectacular',    #swagger auto documentation
    'django_celery_beat',
    'channels',
    'channels_redis',
    'adminPanel',
    'corsheaders',
    'profiles',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Next.js frontend URL
]
CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = 'travel_agency.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'travel_agency.wsgi.application'


'''   #sensitive data shouldn't be shared, put it in .env
SECRET_KEY='hD2j3HfKgRT3xCmQ9z9YxWQKdNvwLZL5xJDwBYE2J7KQhzWQ2g'
PASSWORD='merouane'
'''

ASGI_APPLICATION = "travel_agency.routing.application"




# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'travel_db',
        'USER': 'postgres',
        'PASSWORD':  os.getenv('DB_PASSWORD'),    #hide password
        'HOST': 'localhost',
        'PORT': '5432'
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR,'media')


AUTH_USER_MODEL = 'main.User'



REST_FRAMEWORK = {
    
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}



from datetime import timedelta


SIMPLE_JWT = {

    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),  # Access token validity
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),    # Refresh token validity
    'ROTATE_REFRESH_TOKENS': True,                  # Rotate refresh tokens on refresh
    'BLACKLIST_AFTER_ROTATION': False,               # Blacklist old refresh tokens
    "AUTH_HEADER_TYPES": ("Bearer",),
}






#CELERY SETTNGS
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_TASK_IGNORE_RESULT = True
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC' 
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'



from celery.schedules import crontab


CELERY_BEAT_SCHEDULE = {
    'update_trip_status': {
        'task': 'main.tasks.update_trip_status',
        'schedule': crontab(hour=0, minute=30),  # Daily at 00:30
        'options': {
            'expires': 60 * 60 * 2,  # Expire after 2 hours
        }
    },
    
    'expire_unpaid_reservations': {
        'task': 'main.tasks.expire_unpaid_reservations',
        'schedule': crontab(minute=0, hour='*/6'),  # Every 6 hours
        'options': {
            'expires': 60 * 60,  # Expire after 1 hour
        }
    },
    
    'free_occupied_rooms': {
        'task': 'main.tasks.free_occupied_rooms',
        'schedule': crontab(minute=15, hour='*/2'),  # Every 2 hours, 15 mins offset
        'options': {
            'expires': 60 * 60,  # Expire after 1 hour
        }
    },
    
    'update_reservation_statuses': {
        'task': 'main.tasks.update_reservation_statuses',
        'schedule': crontab(hour=12, minute=30, day_of_month='*/2'),  # Every 2 days at 12:30
        'options': {
            'expires': 60 * 60 * 3,  # Expire after 3 hours
        }
    },
}





SPECTACULAR_SETTINGS = {        #for auto documentation
    'TITLE': 'Your API',
    'DESCRIPTION': 'Auto-generated docs',
    'VERSION': '1.0.0',
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}